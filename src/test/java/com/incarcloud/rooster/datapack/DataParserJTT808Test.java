package com.incarcloud.rooster.datapack;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.Unpooled;
import io.netty.util.ReferenceCountUtil;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * DataParserJTT808Test
 *
 * @author Aaric, created on 2017-08-22T10:23.
 * @since 2.0
 */
public class DataParserJTT808Test {

    /**
     * Logger
     */
    private static Logger logger = LoggerFactory.getLogger(DataParserJTT808Test.class);

    private ByteBuf buffer;
    private IDataParser parser;

    @Before
    public void begin() {
        byte[] data = {
                //0----------心跳包
                0x7E, 0x00, 0x02, 0x00, 0x00, 0x01, 0x33, 0x00, 0x31, 0x27, 0x07, 0x1B, (byte) 0xFF, (byte) 0xC5, 0x7E,
                //1----------终端注册
                0x7E, 0x01, 0x00, 0x00, 0x2D, 0x01, 0x33, 0x00, 0x31, 0x27, 0x07, 0x00, 0x0A, 0x00, 0x2C, 0x01, 0x2F, 0x37, 0x30, 0x31, 0x31, 0x31, 0x42, 0x53, 0x4A, 0x2D, 0x41, 0x36, 0x2D, 0x42, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33, 0x31, 0x32, 0x37, 0x30, 0x37, 0x01, (byte) 0xD4, (byte) 0xC1, 0x42, 0x38, 0x38, 0x38, 0x38, 0x38, 0x45, 0x7E,
                //2----------位置信息汇报
                0x7E, 0x02, 0x00, 0x00, 0x3C, 0x01, 0x33, 0x00, 0x31, 0x27, 0x07, 0x02, (byte) 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, (byte) 0xC1, 0x01, (byte) 0xD1, 0x0B, (byte) 0xE4, 0x06, (byte) 0xD1, (byte) 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x08, 0x25, 0x14, 0x44, 0x16, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x25, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x15, 0x31, 0x01, 0x00, 0x40, 0x7E,
                //3----------终端鉴权
                0x7E, 0x01, 0x02, 0x00, 0x05, 0x01, 0x33, 0x00, 0x31, 0x27, 0x07, 0x00, 0x01, 0x69, 0x6E, 0x63, 0x61, 0x72, 0x53, 0x7E
        };
        buffer = Unpooled.wrappedBuffer(data);
        parser = new DataParserJTT808();
    }

    @After
    public void end() {
        ReferenceCountUtil.release(buffer);
    }

    @Test
    public void testExtract() {
        Assert.assertNotEquals(0, parser.extract(buffer).size());
    }

    @Test
    public void testCreateResponse() {
        List<DataPack> dataPackList = parser.extract(buffer);
        //System.out.println(ByteBufUtil.hexDump(parser.createResponse(dataPackList.get(1), ERespReason.OK)).toUpperCase());
        Assert.assertEquals("7E800100050133003127071BFF1BFF000200A57E", ByteBufUtil.hexDump(parser.createResponse(dataPackList.get(0), ERespReason.OK)).toUpperCase());
    }

    @Test
    public void testExtractBody() {
        DataPack dataPack = parser.extract(buffer).get(2);
        parser.extractBody(dataPack);
    }

    @Test
    public void testGetMetaData() {

    }
}
